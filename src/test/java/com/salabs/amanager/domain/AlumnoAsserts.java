package com.salabs.amanager.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AlumnoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlumnoAllPropertiesEquals(Alumno expected, Alumno actual) {
        assertAlumnoAutoGeneratedPropertiesEquals(expected, actual);
        assertAlumnoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlumnoAllUpdatablePropertiesEquals(Alumno expected, Alumno actual) {
        assertAlumnoUpdatableFieldsEquals(expected, actual);
        assertAlumnoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlumnoAutoGeneratedPropertiesEquals(Alumno expected, Alumno actual) {
        assertThat(expected)
            .as("Verify Alumno auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlumnoUpdatableFieldsEquals(Alumno expected, Alumno actual) {
        assertThat(expected)
            .as("Verify Alumno relevant properties")
            .satisfies(e -> assertThat(e.getNombre()).as("check nombre").isEqualTo(actual.getNombre()))
            .satisfies(e -> assertThat(e.getApellidos()).as("check apellidos").isEqualTo(actual.getApellidos()))
            .satisfies(e -> assertThat(e.getFechaNacimiento()).as("check fechaNacimiento").isEqualTo(actual.getFechaNacimiento()))
            .satisfies(e -> assertThat(e.getDireccion()).as("check direccion").isEqualTo(actual.getDireccion()))
            .satisfies(e -> assertThat(e.getMadre()).as("check madre").isEqualTo(actual.getMadre()))
            .satisfies(e -> assertThat(e.getPadre()).as("check padre").isEqualTo(actual.getPadre()))
            .satisfies(e -> assertThat(e.getContacto()).as("check contacto").isEqualTo(actual.getContacto()))
            .satisfies(e -> assertThat(e.getContacto2()).as("check contacto2").isEqualTo(actual.getContacto2()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getActivo()).as("check activo").isEqualTo(actual.getActivo()))
            .satisfies(e -> assertThat(e.getInscrito()).as("check inscrito").isEqualTo(actual.getInscrito()))
            .satisfies(e -> assertThat(e.getSucursalId()).as("check sucursalId").isEqualTo(actual.getSucursalId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlumnoUpdatableRelationshipsEquals(Alumno expected, Alumno actual) {
        assertThat(expected)
            .as("Verify Alumno relationships")
            .satisfies(e -> assertThat(e.getSucursal()).as("check sucursal").isEqualTo(actual.getSucursal()));
    }
}
